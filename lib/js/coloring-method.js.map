{"version":3,"sources":["../../src/js/coloring-method.js"],"names":["palette","MAX_RADIUS_CONTINUOUS","MAX_RADIUS_DISTANCE_ESTIMATION","MAX_RADIUS_ESCAPE_TIME","MAX_ITERATIONS","DEFAULT_SETTINGS","mandelbrotColor","r","g","b","loopPalette","length","concat","slice","reverse","_escapeTime","x0","y0","options","Object","assign","_palette","_maxIterations","x","y","iteration","tempX","color","Math","floor","_interpolateValue","val1","val2","fraction","_interpolateColor","color1","color2","_continuousColoring","log_zn","log","nu","_exteriorDistanceEstimation","cx","cy","_maxDistance","pixelSize","canvasWidth","zx","zy","dx","dy","tempZx","distanceEstimate","sqrt"],"mappings":"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","file":"coloring-method.js","sourcesContent":["import palette from './palette';\n\n//this is a bitshift operation, not a boolean comparison\n//i normally wouldn't, but it's really convenient here\nconst MAX_RADIUS_CONTINUOUS = (1 << 16);\n\nconst MAX_RADIUS_DISTANCE_ESTIMATION = (1 << 20);\n\nconst MAX_RADIUS_ESCAPE_TIME = (1 << 2);\n\nconst MAX_ITERATIONS = 1000;\n\nconst DEFAULT_SETTINGS = {\n    palette: 'default',\n    mandelbrotColor: {\n        r: 0,\n        g: 0,\n        b: 0\n    },\n    loopPalette: false\n};\n\nfunction loopPalette(palette){\n    if(palette.length > 2){\n        return palette.concat(palette.slice(1,palette.length-1).reverse());\n    }\n    return palette;\n}\n\n//An implementation of the Escape Time Algorithm with continuous coloring\n//almost directly from https://en.wikipedia.org/wiki/Mandelbrot_set#Escape_time_algorithm\n//with https://en.wikipedia.org/wiki/Mandelbrot_set#Continuous_.28smooth.29_coloring\nfunction _escapeTime(x0, y0, options) {\n    options = Object.assign({}, DEFAULT_SETTINGS, options);\n    var _palette = options.loopPalette ? loopPalette(palette[options.palette]): palette[options.palette];\n\n    var _maxIterations = MAX_ITERATIONS + (MAX_ITERATIONS % _palette.length);\n\n    var x = 0.0;\n    var y = 0.0;\n    var iteration = 0;\n\n    while (x * x + y * y < MAX_RADIUS_ESCAPE_TIME && iteration < _maxIterations) {\n        var tempX = x * x - y * y + x0;\n        y = 2 * x * y + y0;\n        x = tempX;\n        iteration++;\n    }\n\n    //deafult to black unless we managed to rule this pixel out\n    var color = options.mandelbrotColor;\n\n    if (iteration < _maxIterations) {\n        color = _palette[Math.floor(iteration % _palette.length)];\n    }\n\n    return color;\n}\n\nfunction _interpolateValue(val1, val2, fraction) {\n    return (1 - fraction) * val1 + fraction * val2;\n}\n\nfunction _interpolateColor(color1, color2, fraction) {\n    return {\n        r: _interpolateValue(color1.r, color2.r, fraction),\n        g: _interpolateValue(color1.g, color2.g, fraction),\n        b: _interpolateValue(color1.b, color2.b, fraction),\n    };\n}\n\nfunction _continuousColoring(x0, y0, options) {\n    options = Object.assign({}, DEFAULT_SETTINGS, options);\n    var _palette = options.loopPalette ? loopPalette(palette[options.palette]): palette[options.palette];\n    var _maxIterations = MAX_ITERATIONS + (MAX_ITERATIONS % _palette.length);\n\n\n    var x = 0.0;\n    var y = 0.0;\n    var iteration = 0;\n    while (x * x + y * y < MAX_RADIUS_CONTINUOUS * 2 && iteration < _maxIterations) {\n        var tempX = x * x - y * y + x0;\n        y = 2 * x * y + y0;\n        x = tempX;\n        iteration++;\n    }\n\n    //deafult to black unless we managed to rule this pixel out\n    var color = options.mandelbrotColor;\n\n    if (iteration < _maxIterations) {\n        //TODO: explicate the math hereâ€“  not it's non-trivial\n        var log_zn = Math.log(x * x + y * y) / 2;\n        var nu = Math.log(log_zn / Math.log(2)) / Math.log(2);\n        iteration = iteration + 1 - nu;\n\n        var color1 = _palette[Math.floor(iteration) % _palette.length];\n        var color2 = _palette[(Math.floor(iteration) + 1) % _palette.length];\n\n        color = _interpolateColor(color1, color2, iteration % 1);\n    }\n\n    return color;\n}\n\nfunction _exteriorDistanceEstimation(cx, cy, options) {\n    options = Object.assign({}, DEFAULT_SETTINGS, options);\n    var _palette = options.loopPalette ? loopPalette(palette[options.palette]): palette[options.palette];\n    var _maxIterations = MAX_ITERATIONS + (MAX_ITERATIONS % _palette.length);\n    var _maxDistance = options.pixelSize*options.canvasWidth*0.0333;\n\n\n    var zx = 0.0;\n    var zy = 0.0;\n    var dx = 0.0;\n    var dy = 0.0;\n    var iteration = 0;\n    while (zx * zx + zy * zy < MAX_RADIUS_DISTANCE_ESTIMATION && iteration < _maxIterations) {\n\n        dx = (2 * zx * dx) - (2 * zy * dx) + 1;\n        dy = 4 * zx * dy;\n\n        var tempZx = (zx * zx) - (zy * zy) + cx;\n        zy = (2 * zx * zy) + cy;\n        zx = tempZx;\n        iteration++;\n    }\n\n    var distanceEstimate = Math.sqrt((zx * zx + zy * zy) / (dx * dx + dy * dy)) * 0.5 * Math.log(zx * zx + zy * zy);\n\n    var color = options.mandelbrotColor;\n\n    if (iteration < _maxIterations) {\n        var color1 = _palette[Math.floor(distanceEstimate/_maxDistance) % _palette.length];\n        var color2 = _palette[(Math.floor(distanceEstimate/_maxDistance) + 1) % _palette.length];\n\n        color = _interpolateColor(color1, color2, distanceEstimate/_maxDistance);\n    }\n\n    return color;\n}\n\nexport default {\n    'default': _continuousColoring,\n    'escape-time': _escapeTime,\n    'continuous-coloring': _continuousColoring,\n    'exterior-distance-estimation': _exteriorDistanceEstimation\n};\n"]}