{"version":3,"sources":["../../src/js/renderer.js"],"names":["coloringMethod","LEFT_EDGE","RIGHT_EDGE","TOP_EDGE","BOTTOM_EDGE","HORIZONTAL_OFFSET","MANDEL_RATIO","MIMETYPE_PNG","DEFAULT_SETTINGS","palette","loopPalette","filters","Renderer","constructor","canvas","options","_options","Object","assign","_canvas","_context","getContext","_imageData","createImageData","width","height","_data","data","_coloringMethod","updateViewportSize","_scale","_dx","_dy","DataUrl","toDataURL","plot","x","y","color","dataIndex","length","r","g","b","_imageRatio","ratio","product","_topEdge","_bottomEdge","_leftEdge","Í","_rightEdge","updateRealBoundaries","xMax","xMin","yMax","yMin","xStep","yStep","render","scale","dx0","dy0","canvasY","canvasX","pos","realPositionToComplexPosition","x0","y0","pixelSize","canvasWidth","putImageData","complexPositionToRealPosition","i","parseInt","realX","realY"],"mappings":"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","file":"renderer.js","sourcesContent":["import coloringMethod from './coloring-method';\n\n//the bounds of the set\nconst LEFT_EDGE = -2.5;\nconst RIGHT_EDGE = 1;\nconst TOP_EDGE = -1;\nconst BOTTOM_EDGE = 1;\n\n//because the bounds of the set are uneven, we're horizontally offset this much\nconst HORIZONTAL_OFFSET = LEFT_EDGE - ((LEFT_EDGE - RIGHT_EDGE) / 2);\n\n//width / height ratio of the bounds of the set\nconst MANDEL_RATIO = (RIGHT_EDGE - LEFT_EDGE) / (BOTTOM_EDGE - TOP_EDGE);\n\nconst MIMETYPE_PNG = 'image/png';\n\n\nconst DEFAULT_SETTINGS = {\n  coloringMethod: 'default',\n  palette: 'default',\n  loopPalette: false,\n  filters: 'none'\n\n};\n\nclass Renderer {\n  constructor(canvas, options) {\n\n    this._options = Object.assign({}, DEFAULT_SETTINGS, options);\n\n    this._canvas = canvas;\n    this._context = this._canvas.getContext('2d');\n    this._imageData = this._context.createImageData(this._canvas.width, this._canvas.height);\n    this._data = this._imageData.data;\n\n    this._coloringMethod = coloringMethod[this._options.coloringMethod];\n\n    this.updateViewportSize();\n\n    this._scale = 1;\n    this._dx = HORIZONTAL_OFFSET;\n    this._dy = 0;\n  }\n\n  get DataUrl() {\n    return this._canvas.toDataURL(MIMETYPE_PNG);\n  }\n\n  plot(x, y, color) {\n    //the canvas pixel data is a bit awkward to get at...\n    //see: https://www.w3.org/TR/2dcontext/#pixel-manipulation\n    var dataIndex = (y * this._imageData.width + x) * 4;\n    if (dataIndex < this._data.length && dataIndex >= 0) {\n      this._data[dataIndex] = color.r;\n      this._data[dataIndex + 1] = color.g;\n      this._data[dataIndex + 2] = color.b;\n      this._data[dataIndex + 3] = 255; //max saturation\n    }\n  }\n\n  updateViewportSize() {\n    //width / height ratio of the viewport\n    this._imageData = this._context.createImageData(this._canvas.width, this._canvas.height);\n    this._data = this._imageData.data;\n    this._imageRatio = this._imageData.width / this._imageData.height;\n\n    var ratio = 1;\n    var product = 0;\n\n    this._topEdge = TOP_EDGE;\n    this._bottomEdge = BOTTOM_EDGE;\n    this._leftEdge = LEFT_EDGE;\n    Í\n    this._rightEdge = RIGHT_EDGE;\n\n    //modify the bounds we display based on the\n    //difference between the viewport ratio and\n    //the ratio of the bounds of the mandelbrot\n    if (this._imageRatio > MANDEL_RATIO) {\n      ratio = (this._imageRatio / MANDEL_RATIO);\n      product = (RIGHT_EDGE - LEFT_EDGE) * ratio;\n\n      this._leftEdge = -product * (2.5 / 3.5);\n      this._rightEdge = product * (1 / 3.5);\n    } else {\n      ratio = (MANDEL_RATIO / this._imageRatio);\n      product = (BOTTOM_EDGE - TOP_EDGE) * ratio;\n\n      this._topEdge = -product / 2.0;\n      this._bottomEdge = product / 2.0;\n    }\n  }\n\n  updateRealBoundaries() {\n    //the Real (ℝ) boundaries of the rendering given the zoom and offset\n    this.xMax = this._rightEdge / this._scale + this._dx;\n    this.xMin = this._leftEdge / this._scale + this._dx;\n    this.yMax = this._bottomEdge / this._scale + this._dy;\n    this.yMin = this._topEdge / this._scale + this._dy;\n\n    //translation of \"Pixel space\" to Real (ℝ) space\n    //i.e., these variables represent the Real difference\n    //between two pixels, horizonatally and vertically\n    this.xStep = (this.xMax - this.xMin) / this._imageData.width;\n    this.yStep = (this.yMax - this.yMin) / this._imageData.height;\n  }\n\n  //scale: how far we've zoomed in from the default\n  //dx0: displacement of perspective horizontally\n  //dy0: displacement of perspective vertically\n  render(scale, dx0, dy0) {\n    this._scale = scale;\n\n    this._dx = dx0 - (HORIZONTAL_OFFSET / this._scale);\n    this._dy = dy0;\n\n    this.updateRealBoundaries();\n\n    for (var canvasY = 0; canvasY < this._imageData.height; canvasY++) {\n      for (var canvasX = 0; canvasX < this._imageData.width; canvasX++) {\n        //scale the pixel values to be within the bounds of the set\n        var pos = this.realPositionToComplexPosition(canvasX, canvasY);\n        var x0 = pos.x;\n        var y0 = pos.y;\n\n        var color = this._coloringMethod(x0, y0, Object.assign(this._options, {\n          pixelSize: this.xStep,\n          canvasWidth: this._canvas.width\n        }));\n\n        this.plot(canvasX, canvasY, color);\n      }\n    }\n\n    //draw it!\n    this._context.putImageData(this._imageData, 0, 0);\n  }\n\n  //r= the real part of the number\n  //i= the imaginary part of the number\n  complexPositionToRealPosition(r, i) {\n    return {\n      x: parseInt((r - this.xMin) / this.xStep),\n      y: parseInt((i - this.yMin) / this.yStep)\n    };\n  }\n\n  realPositionToComplexPosition(realX, realY) {\n    //scale the pixel values to frame the bounds of the set\n    return {\n      x: this.xMin + this.xStep * realX,\n      y: this.yMin + this.yStep * realY\n    };\n  }\n}\n\nexport default Renderer;\n"]}