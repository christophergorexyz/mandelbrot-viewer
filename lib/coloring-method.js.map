{"version":3,"sources":["../src/coloring-method.js"],"names":["DEFAULT_SETTINGS","mandelbrotColor","r","g","b","loopPalette","palette","length","concat","slice","reverse","_escapeTime","sample","options","Object","assign","_palette","color","escaped","Math","floor","iterations","_interpolateValue","val1","val2","fraction","_interpolateColor","color1","color2","_continuousColoring","log_zn","log","orbitDistance","nu"],"mappings":"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","sourcesContent":["const DEFAULT_SETTINGS = {\n  mandelbrotColor: {\n    r: 0,\n    g: 0,\n    b: 0\n  },\n  loopPalette: false\n};\n\nfunction loopPalette(palette) {\n  if (palette.length > 2) {\n    return palette.concat(palette.slice(1, palette.length - 1).reverse());\n  }\n  return palette;\n}\n\n//An implementation of the Escape Time Algorithm with continuous coloring\n//almost directly from https://en.wikipedia.org/wiki/Mandelbrot_set#Escape_time_algorithm\n//with https://en.wikipedia.org/wiki/Mandelbrot_set#Continuous_.28smooth.29_coloring\nfunction _escapeTime(sample, options) {\n  options = Object.assign({}, DEFAULT_SETTINGS, options);\n  let _palette = options.loopPalette ? loopPalette(options.palette) : options.palette;\n\n  //deafult to black unless we managed to rule this pixel out\n  let color = options.mandelbrotColor;\n\n  if (sample.escaped) {\n    color = _palette[Math.floor(sample.iterations % _palette.length)];\n  }\n\n  return color;\n}\n\nfunction _interpolateValue(val1, val2, fraction) {\n  return (1 - fraction) * val1 + fraction * val2;\n}\n\nfunction _interpolateColor(color1, color2, fraction) {\n  return {\n    r: _interpolateValue(color1.r, color2.r, fraction),\n    g: _interpolateValue(color1.g, color2.g, fraction),\n    b: _interpolateValue(color1.b, color2.b, fraction),\n  };\n}\n\nfunction _continuousColoring(sample, options) {\n\n  options = Object.assign({}, DEFAULT_SETTINGS, options);\n  var _palette = options.loopPalette ? loopPalette(options.palette) : options.palette;\n\n  //deafult to black unless we managed to rule this pixel out\n  let color = options.mandelbrotColor;\n\n  if (sample.escaped) {\n    //TODO: explicate the math hereâ€“  it's non-trivial\n    let log_zn = Math.log(sample.orbitDistance) / 2;\n    let nu = Math.log(log_zn / Math.log(2)) / Math.log(2);\n    let fraction = sample.iterations + 1 - nu;\n\n    let color1 = _palette[Math.floor(fraction) % _palette.length];\n    let color2 = _palette[(Math.floor(fraction) + 1) % _palette.length];\n\n    color = _interpolateColor(color1, color2, fraction % 1);\n  }\n  return color;\n}\n\n\nexport default {\n  'default': _escapeTime,\n  'escape-time': _escapeTime,\n  'continuous-coloring': _continuousColoring\n};\n"],"file":"coloring-method.js"}