{"version":3,"sources":["../../src/samplers/julia.js"],"names":["MAX_SAMPLES","MAX_RADIUS","julia","zr","zi","cr","ci","maxRadius","maxSamples","escaped","orbitDistance","orbitPoints","length","tempR","push","iterations"],"mappings":";;;;;;AAAA,IAAMA,WAAW,GAAG,KAAK,EAAzB;AACA,IAAMC,UAAU,GAAG,KAAK,EAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASC,KAAT,GAOL;AAAA,MANAC,EAMA,uEANK,CAML;AAAA,MALAC,EAKA,uEALK,CAKL;AAAA,MAJAC,EAIA,uEAJK,CAIL;AAAA,MAHAC,EAGA,uEAHK,CAGL;AAAA,MAFAC,SAEA,uEAFYN,UAEZ;AAAA,MADAO,UACA,uEADaR,WACb;AACA,MAAIS,OAAO,GAAG,KAAd;AACA,MAAIC,aAAa,GAAG,CAApB;AACA,MAAIC,WAAW,GAAG,CAAC;AACjBR,IAAAA,EAAE,EAAFA,EADiB;AAEjBC,IAAAA,EAAE,EAAFA;AAFiB,GAAD,CAAlB;;AAKA,SAAO,CAACK,OAAD,IAAYE,WAAW,CAACC,MAAZ,GAAqBJ,UAAxC,EAAoD;AAClD;AACA;AACA;AACA,QAAIK,KAAK,GAAGV,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAf,GAAoBC,EAAhC;AACAD,IAAAA,EAAE,GAAG,IAAID,EAAJ,GAASC,EAAT,GAAcE,EAAnB;AACAH,IAAAA,EAAE,GAAGU,KAAL;AAEAH,IAAAA,aAAa,GAAGP,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAA/B,CARkD,CAQf;;AACnCK,IAAAA,OAAO,GAAGC,aAAa,IAAIH,SAA3B;AAEAI,IAAAA,WAAW,CAACG,IAAZ,CAAiB;AACfX,MAAAA,EAAE,EAAFA,EADe;AAEfC,MAAAA,EAAE,EAAFA;AAFe,KAAjB;AAID;;AAED,MAAIW,UAAU,GAAGJ,WAAW,CAACC,MAA7B;AAEA,SAAO;AACLH,IAAAA,OAAO,EAAPA,OADK;AAELM,IAAAA,UAAU,EAAVA,UAFK;AAGLJ,IAAAA,WAAW,EAAXA,WAHK;AAILD,IAAAA,aAAa,EAAbA;AAJK,GAAP;AAMD","sourcesContent":["const MAX_SAMPLES = 1 << 10;\nconst MAX_RADIUS = 1 << 16;\n\n/**\n * a complex number, c, belongs to The Mandelbrot Set if the iterative application\n * of the function f(z)=z^2+c, starting at z=0, does not result in divergence\n * beyond a specified radius before a specified number of iterations\n *\n * a complex number, z, belongs to The Julia Set if the iterative application\n * of the function f(z)=z^2+c, where c is a constant, does not result in divergence\n * beyond a specified radius before a specified number of iterations\n *\n * @param {Number?} zr the real part of the complex number\n * @param {Number?} zi the imaginary part of the complex number\n * @param {Number?} cr the real part of the complex number\n * @param {Number?} ci the imaginary part of the complex number\n * @param {Number?} maxRadius the maximum distance an orbit point may be\n * @param {Number?} maxSamples the maximum number of samples to take before assuming the orbit does not diverge\n */\nexport function julia(\n  zr = 0,\n  zi = 0,\n  cr = 0,\n  ci = 0,\n  maxRadius = MAX_RADIUS,\n  maxSamples = MAX_SAMPLES\n) {\n  let escaped = false;\n  let orbitDistance = 0;\n  let orbitPoints = [{\n    zr,\n    zi\n  }];\n\n  while (!escaped && orbitPoints.length < maxSamples) {\n    //this is literally just the FOIL method\n    //we subtract the Last terms from the First because `i**2===-1`, and they are\n    //no longer imaginary, then we combine the Inside and Outside because they are\n    let tempR = zr * zr - zi * zi + cr;\n    zi = 2 * zr * zi + ci;\n    zr = tempR;\n\n    orbitDistance = zr * zr + zi * zi; //pythagoras\n    escaped = orbitDistance >= maxRadius;\n\n    orbitPoints.push({\n      zr,\n      zi\n    });\n  }\n\n  let iterations = orbitPoints.length;\n\n  return {\n    escaped,\n    iterations,\n    orbitPoints,\n    orbitDistance\n  };\n}\n"],"file":"julia.js"}