{"version":3,"sources":["../src/renderer.js"],"names":["LEFT_EDGE","RIGHT_EDGE","TOP_EDGE","BOTTOM_EDGE","HORIZONTAL_OFFSET","MANDEL_RATIO","MIMETYPE_PNG","DEFAULT_SETTINGS","coloringMethod","palette","loopPalette","filters","Renderer","canvas","options","_options","Object","assign","_canvas","_context","getContext","_imageData","createImageData","width","height","_data","data","_coloringMethod","_sampler","julia","updateViewportSize","_scale","_dx","_dy","toDataURL","x","y","color","dataIndex","length","r","g","b","_imageRatio","ratio","product","_topEdge","_bottomEdge","_leftEdge","_rightEdge","xMax","xMin","yMax","yMin","xStep","yStep","scale","dx0","dy0","updateRealBoundaries","realPositionToComplexPosition","i","sample","plot","putImageData","parseInt"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;AAIA;AACA,IAAMA,SAAS,GAAG,CAAC,GAAnB;AACA,IAAMC,UAAU,GAAG,CAAnB;AACA,IAAMC,QAAQ,GAAG,CAAC,CAAlB;AACA,IAAMC,WAAW,GAAG,CAApB,C,CAEA;;AACA,IAAMC,iBAAiB,GAAGJ,SAAS,GAAI,CAACA,SAAS,GAAGC,UAAb,IAA2B,CAAlE,C,CAEA;;AACA,IAAMI,YAAY,GAAG,CAACJ,UAAU,GAAGD,SAAd,KAA4BG,WAAW,GAAGD,QAA1C,CAArB;AAEA,IAAMI,YAAY,GAAG,WAArB;AAGA,IAAMC,gBAAgB,GAAG;AACvBC,EAAAA,cAAc,EAAE,SADO;AAEvBC,EAAAA,OAAO,EAAE,SAFc;AAGvBC,EAAAA,WAAW,EAAE,KAHU;AAIvBC,EAAAA,OAAO,EAAE;AAJc,CAAzB;;IAQMC,Q;AACJ,oBAAYC,MAAZ,EAAoBC,OAApB,EAA6B;AAAA;;AAE3B,SAAKC,QAAL,GAAgBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,gBAAlB,EAAoCO,OAApC,CAAhB;AAEA,SAAKI,OAAL,GAAeL,MAAf;AACA,SAAKM,QAAL,GAAgB,KAAKD,OAAL,CAAaE,UAAb,CAAwB,IAAxB,CAAhB;AACA,SAAKC,UAAL,GAAkB,KAAKF,QAAL,CAAcG,eAAd,CAA8B,KAAKJ,OAAL,CAAaK,KAA3C,EAAkD,KAAKL,OAAL,CAAaM,MAA/D,CAAlB;AACA,SAAKC,KAAL,GAAa,KAAKJ,UAAL,CAAgBK,IAA7B;AAEA,SAAKC,eAAL,GAAuBnB,2BAAe,KAAKO,QAAL,CAAcP,cAA7B,CAAvB;AACA,SAAKoB,QAAL,GAAgBC,YAAhB;AAEA,SAAKC,kBAAL;AAEA,SAAKC,MAAL,GAAc,CAAd;AACA,SAAKC,GAAL,GAAW5B,iBAAX;AACA,SAAK6B,GAAL,GAAW,CAAX;AACD;;;;SAED,eAAc;AACZ,aAAO,KAAKf,OAAL,CAAagB,SAAb,CAAuB5B,YAAvB,CAAP;AACD;;;WAED,cAAK6B,CAAL,EAAQC,CAAR,EAAWC,KAAX,EAAkB;AAChB;AACA;AACA,UAAIC,SAAS,GAAG,CAACF,CAAC,GAAG,KAAKf,UAAL,CAAgBE,KAApB,GAA4BY,CAA7B,IAAkC,CAAlD;;AACA,UAAIG,SAAS,GAAG,KAAKb,KAAL,CAAWc,MAAvB,IAAiCD,SAAS,IAAI,CAAlD,EAAqD;AACnD,aAAKb,KAAL,CAAWa,SAAX,IAAwBD,KAAK,CAACG,CAA9B;AACA,aAAKf,KAAL,CAAWa,SAAS,GAAG,CAAvB,IAA4BD,KAAK,CAACI,CAAlC;AACA,aAAKhB,KAAL,CAAWa,SAAS,GAAG,CAAvB,IAA4BD,KAAK,CAACK,CAAlC;AACA,aAAKjB,KAAL,CAAWa,SAAS,GAAG,CAAvB,IAA4B,GAA5B,CAJmD,CAIlB;AAClC;AACF;;;WAED,8BAAqB;AACnB;AACA,WAAKjB,UAAL,GAAkB,KAAKF,QAAL,CAAcG,eAAd,CAA8B,KAAKJ,OAAL,CAAaK,KAA3C,EAAkD,KAAKL,OAAL,CAAaM,MAA/D,CAAlB;AACA,WAAKC,KAAL,GAAa,KAAKJ,UAAL,CAAgBK,IAA7B;AACA,WAAKiB,WAAL,GAAmB,KAAKtB,UAAL,CAAgBE,KAAhB,GAAwB,KAAKF,UAAL,CAAgBG,MAA3D;AAEA,UAAIoB,KAAK,GAAG,CAAZ;AACA,UAAIC,OAAO,GAAG,CAAd;AAEA,WAAKC,QAAL,GAAgB5C,QAAhB;AACA,WAAK6C,WAAL,GAAmB5C,WAAnB;AACA,WAAK6C,SAAL,GAAiBhD,SAAjB;AACA,WAAKiD,UAAL,GAAkBhD,UAAlB,CAZmB,CAcnB;AACA;AACA;;AACA,UAAI,KAAK0C,WAAL,GAAmBtC,YAAvB,EAAqC;AACnCuC,QAAAA,KAAK,GAAI,KAAKD,WAAL,GAAmBtC,YAA5B;AACAwC,QAAAA,OAAO,GAAG,CAAC5C,UAAU,GAAGD,SAAd,IAA2B4C,KAArC;AAEA,aAAKI,SAAL,GAAiB,CAACH,OAAD,IAAY,MAAM,GAAlB,CAAjB;AACA,aAAKI,UAAL,GAAkBJ,OAAO,IAAI,IAAI,GAAR,CAAzB;AACD,OAND,MAMO;AACLD,QAAAA,KAAK,GAAIvC,YAAY,GAAG,KAAKsC,WAA7B;AACAE,QAAAA,OAAO,GAAG,CAAC1C,WAAW,GAAGD,QAAf,IAA2B0C,KAArC;AAEA,aAAKE,QAAL,GAAgB,CAACD,OAAD,GAAW,GAA3B;AACA,aAAKE,WAAL,GAAmBF,OAAO,GAAG,GAA7B;AACD;AACF;;;WAED,gCAAuB;AACrB;AACA,WAAKK,IAAL,GAAY,KAAKD,UAAL,GAAkB,KAAKlB,MAAvB,GAAgC,KAAKC,GAAjD;AACA,WAAKmB,IAAL,GAAY,KAAKH,SAAL,GAAiB,KAAKjB,MAAtB,GAA+B,KAAKC,GAAhD;AACA,WAAKoB,IAAL,GAAY,KAAKL,WAAL,GAAmB,KAAKhB,MAAxB,GAAiC,KAAKE,GAAlD;AACA,WAAKoB,IAAL,GAAY,KAAKP,QAAL,GAAgB,KAAKf,MAArB,GAA8B,KAAKE,GAA/C,CALqB,CAOrB;AACA;AACA;;AACA,WAAKqB,KAAL,GAAa,CAAC,KAAKJ,IAAL,GAAY,KAAKC,IAAlB,IAA0B,KAAK9B,UAAL,CAAgBE,KAAvD;AACA,WAAKgC,KAAL,GAAa,CAAC,KAAKH,IAAL,GAAY,KAAKC,IAAlB,IAA0B,KAAKhC,UAAL,CAAgBG,MAAvD;AACD,K,CAED;AACA;AACA;;;;WACA,gBAAOgC,KAAP,EAAcC,GAAd,EAAmBC,GAAnB,EAAwB;AACtB,WAAK3B,MAAL,GAAcyB,KAAd;AAEA,WAAKxB,GAAL,GAAWyB,GAAG,GAAIrD,iBAAiB,GAAG,KAAK2B,MAA3C;AACA,WAAKE,GAAL,GAAWyB,GAAX;AAEA,WAAKC,oBAAL;;AAEA,WAAK,IAAIvB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKf,UAAL,CAAgBG,MAApC,EAA4CY,CAAC,EAA7C,EAAiD;AAC/C,aAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKd,UAAL,CAAgBE,KAApC,EAA2CY,CAAC,EAA5C,EAAgD;AAC9C;AACA,sCAGI,KAAKyB,6BAAL,CAAmCzB,CAAnC,EAAsCC,CAAtC,CAHJ;AAAA,cACEI,CADF,yBACEA,CADF;AAAA,cAEEqB,CAFF,yBAEEA,CAFF;;AAKA,cAAIC,MAAM,GAAG,KAAKlC,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoBY,CAApB,EAAuBqB,CAAvB,CAAb;;AAEA,cAAIxB,KAAK,GAAG,KAAKV,eAAL,CAAqBmC,MAArB,EAA6B,KAAK/C,QAAlC,CAAZ;;AACA,eAAKgD,IAAL,CAAU5B,CAAV,EAAaC,CAAb,EAAgBC,KAAhB;AACD;AACF,OArBqB,CAuBtB;;;AACA,WAAKlB,QAAL,CAAc6C,YAAd,CAA2B,KAAK3C,UAAhC,EAA4C,CAA5C,EAA+C,CAA/C;AACD,K,CAED;AACA;;;;WACA,uCAA8BmB,CAA9B,EAAiCqB,CAAjC,EAAoC;AAClC,aAAO;AACL1B,QAAAA,CAAC,EAAE8B,QAAQ,CAAC,CAACzB,CAAC,GAAG,KAAKW,IAAV,IAAkB,KAAKG,KAAxB,CADN;AAELlB,QAAAA,CAAC,EAAE6B,QAAQ,CAAC,CAACJ,CAAC,GAAG,KAAKR,IAAV,IAAkB,KAAKE,KAAxB;AAFN,OAAP;AAID;;;WAED,uCAA8BpB,CAA9B,EAAiCC,CAAjC,EAAoC;AAClC;AACA,aAAO;AACLI,QAAAA,CAAC,EAAE,KAAKW,IAAL,GAAY,KAAKG,KAAL,GAAanB,CADvB;AAEL0B,QAAAA,CAAC,EAAE,KAAKR,IAAL,GAAY,KAAKE,KAAL,GAAanB;AAFvB,OAAP;AAID;;;;;;eAGYxB,Q","sourcesContent":["import coloringMethod from './coloring-method';\nimport {\n  julia\n} from './samplers/julia';\n\n//the bounds of the set\nconst LEFT_EDGE = -2.5;\nconst RIGHT_EDGE = 1;\nconst TOP_EDGE = -1;\nconst BOTTOM_EDGE = 1;\n\n//because the bounds of the set are uneven, we're horizontally offset this much\nconst HORIZONTAL_OFFSET = LEFT_EDGE - ((LEFT_EDGE - RIGHT_EDGE) / 2);\n\n//width / height ratio of the bounds of the set\nconst MANDEL_RATIO = (RIGHT_EDGE - LEFT_EDGE) / (BOTTOM_EDGE - TOP_EDGE);\n\nconst MIMETYPE_PNG = 'image/png';\n\n\nconst DEFAULT_SETTINGS = {\n  coloringMethod: 'default',\n  palette: 'default',\n  loopPalette: false,\n  filters: 'none'\n\n};\n\nclass Renderer {\n  constructor(canvas, options) {\n\n    this._options = Object.assign({}, DEFAULT_SETTINGS, options);\n\n    this._canvas = canvas;\n    this._context = this._canvas.getContext('2d');\n    this._imageData = this._context.createImageData(this._canvas.width, this._canvas.height);\n    this._data = this._imageData.data;\n\n    this._coloringMethod = coloringMethod[this._options.coloringMethod];\n    this._sampler = julia;\n\n    this.updateViewportSize();\n\n    this._scale = 1;\n    this._dx = HORIZONTAL_OFFSET;\n    this._dy = 0;\n  }\n\n  get DataUrl() {\n    return this._canvas.toDataURL(MIMETYPE_PNG);\n  }\n\n  plot(x, y, color) {\n    //the canvas pixel data is a bit awkward to get at...\n    //see: https://www.w3.org/TR/2dcontext/#pixel-manipulation\n    var dataIndex = (y * this._imageData.width + x) * 4;\n    if (dataIndex < this._data.length && dataIndex >= 0) {\n      this._data[dataIndex] = color.r;\n      this._data[dataIndex + 1] = color.g;\n      this._data[dataIndex + 2] = color.b;\n      this._data[dataIndex + 3] = 255; //max saturation\n    }\n  }\n\n  updateViewportSize() {\n    //width / height ratio of the viewport\n    this._imageData = this._context.createImageData(this._canvas.width, this._canvas.height);\n    this._data = this._imageData.data;\n    this._imageRatio = this._imageData.width / this._imageData.height;\n\n    var ratio = 1;\n    var product = 0;\n\n    this._topEdge = TOP_EDGE;\n    this._bottomEdge = BOTTOM_EDGE;\n    this._leftEdge = LEFT_EDGE;\n    this._rightEdge = RIGHT_EDGE;\n\n    //modify the bounds we display based on the\n    //difference between the viewport ratio and\n    //the ratio of the bounds of the mandelbrot\n    if (this._imageRatio > MANDEL_RATIO) {\n      ratio = (this._imageRatio / MANDEL_RATIO);\n      product = (RIGHT_EDGE - LEFT_EDGE) * ratio;\n\n      this._leftEdge = -product * (2.5 / 3.5);\n      this._rightEdge = product * (1 / 3.5);\n    } else {\n      ratio = (MANDEL_RATIO / this._imageRatio);\n      product = (BOTTOM_EDGE - TOP_EDGE) * ratio;\n\n      this._topEdge = -product / 2.0;\n      this._bottomEdge = product / 2.0;\n    }\n  }\n\n  updateRealBoundaries() {\n    //the Real (ℝ) boundaries of the rendering given the zoom and offset\n    this.xMax = this._rightEdge / this._scale + this._dx;\n    this.xMin = this._leftEdge / this._scale + this._dx;\n    this.yMax = this._bottomEdge / this._scale + this._dy;\n    this.yMin = this._topEdge / this._scale + this._dy;\n\n    //translation of \"Pixel space\" to Real (ℝ) space\n    //i.e., these variables represent the Real difference\n    //between two pixels, horizonatally and vertically\n    this.xStep = (this.xMax - this.xMin) / this._imageData.width;\n    this.yStep = (this.yMax - this.yMin) / this._imageData.height;\n  }\n\n  //scale: how far we've zoomed in from the default\n  //dx0: displacement of perspective horizontally\n  //dy0: displacement of perspective vertically\n  render(scale, dx0, dy0) {\n    this._scale = scale;\n\n    this._dx = dx0 - (HORIZONTAL_OFFSET / this._scale);\n    this._dy = dy0;\n\n    this.updateRealBoundaries();\n\n    for (var y = 0; y < this._imageData.height; y++) {\n      for (var x = 0; x < this._imageData.width; x++) {\n        //scale the pixel values to be within the bounds of the set\n        let {\n          r,\n          i\n        } = this.realPositionToComplexPosition(x, y);\n\n        let sample = this._sampler(0, 0, r, i);\n\n        let color = this._coloringMethod(sample, this._options);\n        this.plot(x, y, color);\n      }\n    }\n\n    //draw it!\n    this._context.putImageData(this._imageData, 0, 0);\n  }\n\n  //r= the real part of the number\n  //i= the imaginary part of the number\n  complexPositionToRealPosition(r, i) {\n    return {\n      x: parseInt((r - this.xMin) / this.xStep),\n      y: parseInt((i - this.yMin) / this.yStep)\n    };\n  }\n\n  realPositionToComplexPosition(x, y) {\n    //scale the pixel values to frame the bounds of the set\n    return {\n      r: this.xMin + this.xStep * x,\n      i: this.yMin + this.yStep * y\n    };\n  }\n}\n\nexport default Renderer;\n"],"file":"renderer.js"}